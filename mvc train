
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class TrainController
 */
@WebServlet("/TrainController")
public class TrainController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	TrainDAL td = new TrainDAL();

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public TrainController() {
		super();
		// TODO Auto-generated constructor stub
	}

	public void callDAL(HttpServletRequest request, HttpServletResponse response) {

		int pa1, pa2, pa3, pa4, pa5;
		String p1, p2, p3, p4, p5, pg1, pg2, pg3, pg4, pg5;

		try {
			String status = request.getParameter("status");
			// String status = "FromTo";
			if (status.equals("FromTo")) {
				TrainDAL td = new TrainDAL();

				FromTomodel fm = td.FromTo(response);
				String[] s1 = fm.getfrom().split(",");
				for (String x : s1) {
					response.getWriter().print("<option>" + x + "</option>" + "<br>");
				}
			}

			else if (status.equals("Trains")) {
				TrainDAL td = new TrainDAL();

				String from = request.getParameter("from");
				String to = request.getParameter("to");

				TrainsModel tm = td.Trains(from, to, response);
				String s1[] = tm.getTrainName().split(",");
				String s2[] = tm.getTrainno().split(",");
				for (int i = 0; i < s1.length; i++) {
					String y = " ";
					y += s2[i] + " " + s1[i];

					response.getWriter().print("<option>" + y + "</option>" + "<br>");

				}
			}

			else if (status.equals("Classes")) {
				TrainDAL td = new TrainDAL();

				int TrainNo = Integer.parseInt(request.getParameter("TrainNo"));
				// int TrainNo = 22824;
				ClassModel cm = td.TrainClass(TrainNo, response);
				String[] s = cm.getcls().split(",");
				for (String s1 : s) {
					response.getWriter().print("<option>" + s1 + "</option>" + "<br>");
				}

			}

			else if (status.equals("Fare")) {
				TrainDAL td = new TrainDAL();

				String from = request.getParameter("from");
				String to = request.getParameter("to");
				String lsc = request.getParameter("lsc");
				System.out.println("Class is" + lsc);
				int TrainNo = Integer.parseInt(request.getParameter("TrainNo"));
				double classfare = td.TrainFareclass(lsc, TrainNo, response);
				System.out.println(classfare);
				double distfare = td.TrainFaredist(from, to, TrainNo, response);
				System.out.println(distfare);
				//
				// double TotalFare = distfare * classfare;
				// System.out.println(TotalFare);
				response.setContentType("text/html");
				p1 = request.getParameter("p1");
				p2 = request.getParameter("p2");
				p3 = request.getParameter("p3");
				p4 = request.getParameter("p4");
				p5 = request.getParameter("p5");
				pa1 = Integer.parseInt(request.getParameter("pa1"));
				pa2 = Integer.parseInt(request.getParameter("pa2"));
				pa3 = Integer.parseInt(request.getParameter("pa3"));
				pa4 = Integer.parseInt(request.getParameter("pa4"));
				pa5 = Integer.parseInt(request.getParameter("pa5"));
				pg1 = request.getParameter("pg1");
				pg2 = request.getParameter("pg2");
				pg3 = request.getParameter("pg3");
				pg4 = request.getParameter("pg3");
				pg5 = request.getParameter("pg4");
				Passengers pass1 = new Passengers(p1, pa1, pg1);
				Passengers pass2 = new Passengers(p2, pa2, pg2);
				Passengers pass3 = new Passengers(p3, pa3, pg3);
				Passengers pass4 = new Passengers(p4, pa4, pg4);
				Passengers pass5 = new Passengers(p5, pa5, pg5);

				ArrayList<Passengers> pass = new ArrayList<>();
				pass.add(pass1);
				pass.add(pass2);
				pass.add(pass3);
				pass.add(pass4);
				pass.add(pass5);

				BusinessLogicFare blf = new BusinessLogicFare();

				List<Double> FinalfareList = blf.bbl(classfare, distfare, pass);
				// double TotalFare1 = 0;
				// for (Passengers y : pass) {
				//
				// if (y.getage() > 10 && y.getage() < 80) {
				// TotalFare1 += TotalFare;
				// } else if (y.getage() > 80 || y.getage() < 10) {
				// TotalFare1 += TotalFare / 2;
				// }
				// }

				// Get the PrintWriter object to write the response
				double TotalFare1 = blf.bblFinal(classfare, distfare, pass);
				PrintWriter out = response.getWriter();
				out.println("<script>document.getElementById('fare').value = " + TotalFare1 + ";</script>");

			} else if (status.equals("Save")) {
				TrainDAL td = new TrainDAL();

				String from = request.getParameter("from");
				String to = request.getParameter("to");
				String lsc = request.getParameter("lsc");
				int TrainNo = Integer.parseInt(request.getParameter("TrainNo"));
				String Trname = request.getParameter("TrainName");

				int Fare = Integer.parseInt(request.getParameter("fare"));
				System.out.println(from);
				System.out.println(to);
				System.out.println(lsc);
				System.out.println(Fare);

				p1 = request.getParameter("p1");
				p2 = request.getParameter("p2");
				p3 = request.getParameter("p3");
				p4 = request.getParameter("p4");
				p5 = request.getParameter("p5");
				pa1 = Integer.parseInt(request.getParameter("pa1"));
				pa2 = Integer.parseInt(request.getParameter("pa2"));
				pa3 = Integer.parseInt(request.getParameter("pa3"));
				pa4 = Integer.parseInt(request.getParameter("pa4"));
				pa5 = Integer.parseInt(request.getParameter("pa5"));
				pg1 = request.getParameter("pg1");
				pg2 = request.getParameter("pg2");
				pg3 = request.getParameter("pg3");
				pg4 = request.getParameter("pg3");
				pg5 = request.getParameter("pg4");
				Passengers pass1 = new Passengers(p1, pa1, pg1);
				Passengers pass2 = new Passengers(p2, pa2, pg2);
				Passengers pass3 = new Passengers(p3, pa3, pg3);
				Passengers pass4 = new Passengers(p4, pa4, pg4);
				Passengers pass5 = new Passengers(p5, pa5, pg5);

				ArrayList<Passengers> pass = new ArrayList<>();
				pass.add(pass1);
				pass.add(pass2);
				pass.add(pass3);
				pass.add(pass4);
				pass.add(pass5);
				// td.SaveDB(TrainNo, Trname, from, to, lsc, pass);
				// Passengers ps = new Passengers(pass);

				// request.setAttribute("TrainNo", TrainNo);
				//
				// request.setAttribute("TrainName", Trname);
				// request.setAttribute("From", from);
				// request.setAttribute("To", to);
				// request.setAttribute("TrainClass", lsc);
				// request.setAttribute("fare", Fare);
				// request.setAttribute("passenger1_name", p1);
				// request.setAttribute("passenger2_name", p2);
				// request.setAttribute("passenger3_name", p3);
				// request.setAttribute("passenger4_name", p4);
				// request.setAttribute("passenger5_name", p5);
				System.out.println("hrllo3");
				// request.setAttribute("passenger1_age", pa1);
				// request.setAttribute("passenger2_age", pa2);
				// request.setAttribute("passenger3_age", pa3);
				// request.setAttribute("passenger4_age", pa4);
				// request.setAttribute("passenger5_age", pa5);
				System.out.println("hrllo9");
				// request.setAttribute("passenger1_gender", pg1);
				// request.setAttribute("passenger2_gender", pg2);
				// request.setAttribute("passenger3_gender", pg3);
				// request.setAttribute("passenger4_gender", pg4);
				// request.setAttribute("passenger5_gender", pg5);
				System.out.println("hrllo");
				request.getRequestDispatcher("/preview.jsp").forward(request, response);

				System.out.println("hrllo1");
				// dispatcher.sendRedirect(request, response);
			}
		} catch (Exception e) {

		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		callDAL(request, response);
	}
}


<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"
    %>
  
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="
<table>

  <tr>
    <th>Train Number</th>
    <th>Train Name</th>
    <th>From</th>
    <th>To</th>
    <th>Class</th>
    <th>Fare</th>
  </tr>
  <tr>
    <td><%  response.getWriter().print(request.getParameter("TrainNo"));%>  </td>
    
    <td><% response.getWriter().print(request.getParameter("TrainName")); %></td>
    <td><% response.getWriter().print(request.getParameter("from"));%></td>
    <td><% response.getWriter().print(request.getParameter("to")); %></td>
    <td><%  response.getWriter().print(request.getParameter("lsc"));%></td>
  </tr>
</table>
<br>
<table>
  <tr>
    <th>Passenger Name</th>
    <th>Passenger Age</th>
    <th>Passenger Gender</th>
  </tr>
  <tr>
    <td><% response.getWriter().print(request.getParameter("p1")); %></td>
    <td><%response.getWriter().print( request.getParameter("pa1")); %></td>
      <td><%response.getWriter().print( request.getParameter("pg1"));%></td>
  </tr>
  <tr>
    <td><%  response.getWriter().print(request.getParameter("p2")); %></td>
    <td><%response.getWriter().print(request.getParameter("pa2")); %></td>
      <td><% response.getWriter().print( request.getParameter("pg2")); %></td>
  </tr>
  <tr>
 <td><%response.getWriter().print(request.getParameter("p3")); %></td>
    <td><% response.getWriter().print(request.getParameter("pa3")) ;%></td>
      <td><% response.getWriter().print( request.getParameter("pg3")); %></td>
  </tr>
  <tr>
    <td><% response.getWriter().print( request.getParameter("p4"));%></td>
    <td><%response.getWriter().print(request.getParameter("pa4"));%></td>
      <td><% response.getWriter().print( request.getParameter("pg4")); %></td>
  </tr>
  <tr>
    <td><%  response.getWriter().print(request.getParameter("p5")); %></td>
    <td><%  response.getWriter().print(request.getParameter("pa5")); %></td>
      <td><%response.getWriter().print( request.getParameter("pg5")); %></td>
  </tr>
</body>
</html>



import java.util.ArrayList;
import java.util.List;

public class BusinessLogicFare {
	// TrainDAL td= new TrainDAL();
	public List<Double> bbl(double classfare, double distfare, ArrayList<Passengers> pass) {

		List<Double> fareList = new ArrayList<>();
		for (Passengers y : pass) {
			double TotalFare = distfare * classfare;
			if (y.getage() > 0 && y.getage() < 6) {
				TotalFare = 0;
			} else if (y.getage() > 5 && y.getage() < 13) {
				TotalFare = TotalFare / 2;
			} else if (y.getage() >= 65 && y.getGender().equals("Male")) {
				TotalFare = TotalFare - (TotalFare / 4);
			} else if (y.getage() >= 58 && y.getGender().equals("Female")) {
				TotalFare = TotalFare - (TotalFare / 4);
			}
			fareList.add(TotalFare);

		}

		return fareList;

	}

	public double bblFinal(double classfare, double distfare, ArrayList<Passengers> pass) {
		double TotalFare = distfare * classfare;

		for (Passengers y : pass) {

			if (y.getage() > 0 && y.getage() < 6) {
				TotalFare += 0;
			} else if (y.getage() > 5 && y.getage() < 13) {
				TotalFare += TotalFare / 2;
			} else if (y.getage() >= 65 && y.getGender().equals("Male")) {
				TotalFare += TotalFare - (TotalFare / 4);
			} else if (y.getage() >= 58 && y.getGender().equals("Female")) {
				TotalFare += TotalFare - (TotalFare / 4);
			}

		}

		return TotalFare;

	}
}



import java.util.ArrayList;

public class Passengers {
	String name;
	int age;
	String gender;
	ArrayList<Passengers> pass;

	Passengers(String pn, int pa, String pg) {
		this.name = pn;
		this.age = pa;
		this.gender = pg;
	}

	Passengers(ArrayList<Passengers> pass) {
		this.pass = pass;
	}

	public String getName() {
		return name;
	}

	public int getage() {
		return age;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setage(int age) {
		this.age = age;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public String getGender() {
		return gender;
	}

	public ArrayList<Passengers> getPass() {
		return pass;
	}

}


import java.util.ArrayList;

public class FromTomodel {

	String from;
	String to;
	ArrayList<String> al = new ArrayList();

	FromTomodel() {

	}

	public String getfrom() {
		String s = " ";
		for (int i = 0; i < al.size(); i++) {
			s = s + al.get(i) + ",";
		}
		return s;
	}

	public void setfrom(String from) {
		al.add(from);
	}

}



import java.util.ArrayList;

public class TrainsModel {
	String TrainName;
	int Trainno;

	String from;
	String to;
	ArrayList<String> tn = new ArrayList();
	ArrayList<String> tr = new ArrayList();

	TrainsModel() {

	}

	public String getTrainName() {
		String s = " ";
		for (int i = 0; i < tn.size(); i++) {
			s = s + tn.get(i) + ",";
		}
		return s;

	}

	public void setTrainName(String Trn) {
		tn.add(Trn);
	}

	public String getTrainno() {
		String s = " ";
		for (int i = 0; i < tr.size(); i++) {
			s = s + tr.get(i) + ",";
		}
		return s;
	}

	public void setTrainno(String trno) {
		tr.add(trno);
	}

	public String getfrom() {
		return from;
	}

	public void setfrom(String from) {
		this.from = from;
	}

	public String getto() {
		return to;
	}

	public void setto(String to) {
		this.to = to;
	}
}


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;

import javax.servlet.http.HttpServletResponse;

public class TrainDAL {

	public FromTomodel FromTo(HttpServletResponse response) {
		FromTomodel fm = new FromTomodel();
		String s1 = " ";
		try {
			Connection c = null;
			Class.forName("org.postgresql.Driver");

			String s = "";

			s = "jdbc:postgresql://192.168.110.48:5432/plf_training?user=plf_training_admin&password=pff123";

			c = DriverManager.getConnection(s);
			Statement st = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			ResultSet stt = st.executeQuery("select * from sow_stn");
			stt.absolute(0);
			String arr[] = {};
			while (stt.next()) {

				s1 = s1 + stt.getString(1);
				fm.setfrom(s1);

				s1 = " ";
			}
		} catch (Exception e) {
			System.out.println(e);
		}

		return fm;
	}

	public TrainsModel Trains(String from, String to, HttpServletResponse response) {
		TrainsModel tm = new TrainsModel();
		String dat = "";
		try {
			Connection c = null;

			Class.forName("org.postgresql.Driver");

			String s = "jdbc:postgresql://192.168.110.48:5432/plf_training?user=plf_training_admin&password=pff123";

			c = DriverManager.getConnection(s);

			Statement st = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			PreparedStatement p = c.prepareStatement(
					"select * from sow_trains where tr_no in(select tr_no  from sow_stn where stn_code =?  ) and tr_no in(select tr_no from sow_stn where stn_code =?) ");
			p.setString(1, from);
			p.setString(2, to);
			ResultSet stt = p.executeQuery();

			while (stt.next()) {

				dat = stt.getString(1);
				tm.setTrainno(dat);
				dat = stt.getString(2);
				tm.setTrainName(dat);

				dat = " ";

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return tm;
	}

	public ClassModel TrainClass(int TrainNo, HttpServletResponse response) {
		String se = " ";
		ClassModel cm = new ClassModel();
		try {
			Connection conn = null;

			String cs;
			Class.forName("org.postgresql.Driver");
			cs = "jdbc:postgresql://192.168.110.48:5432/plf_training?user=plf_training_admin&password=pff123";
			conn = DriverManager.getConnection(cs);
			Statement st = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			ResultSet stt = st.executeQuery("select * from tn_tvl_classes where tr_no =" + TrainNo + " ");
			System.out.println("hello1");
			stt.absolute(0);
			while (stt.next()) {
				se = " ";
				se += stt.getString(2) + ",";

				cm.setcls(se);
			}
		} catch (Exception e) {
			System.out.println(e);
		}
		return cm;
	}

	public int TrainFaredist(String from, String to, int TrainNo, HttpServletResponse response) {

		// dist, class cost
		int faredist = 0;
		try {
			Connection c = null;
			Class.forName("org.postgresql.Driver");

			String s = "";
			s = "jdbc:postgresql://192.168.110.48:5432/plf_training?user=plf_training_admin&password=pff123";
			c = DriverManager.getConnection(s);

			Statement st = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			Statement st1 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			Statement st2 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			Statement st3 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

			ResultSet stt = st.executeQuery("select * from sow_stn_dis");
			ResultSet stt3 = st1.executeQuery("select * from sow_stn_dis");
			stt.absolute(0);
			stt3.absolute(0);
			int dist = 0;
			while (stt.next()) {

				// int TrainNo = Integer.parseInt(request.getParameter("TrainNo"));
				System.out.println(stt.getString(1));

				if (stt.getString(1).equals(from)) {

					System.out.println("dist is" + dist);
					while (stt3.next()) {

						if ((stt3.getString(2).equals(to))) {
							System.out.println("each dist" + (stt3.getInt(3)));
							dist = dist + stt3.getInt(3);
							break;
						} else {
							System.out.println("each dist" + (stt3.getInt(3)));
							dist = dist + stt3.getInt(3);
						}

					}

				}
			}

			System.out.println("dist is" + dist);
			stt.close();
			ResultSet stt1 = st.executeQuery(
					"select * from sow_tr_fares where far_dist=(select min(far_dist) from sow_tr_fares where far_dist>="
							+ dist + ")");
			stt1.absolute(1);
			System.out.println("fare" + stt1.getInt(2));
			faredist = stt1.getInt(2);

			// response.setContentType("text/html");
			//
			// // Get the PrintWriter object to write the response
			// PrintWriter out = response.getWriter();
			//
			// out.println("<script>document.getElementById('fare').value = " + TotalFare + ";</script>");

		} catch (Exception e) {
			System.out.println(e);
		}
		return faredist;

	}

	public double TrainFareclass(String clss, int TrainNo, HttpServletResponse response) {
		double farefactor = 0.0;
		// dist, class cost
		try {
			Connection c = null;
			Class.forName("org.postgresql.Driver");

			String s = "";
			s = "jdbc:postgresql://192.168.110.48:5432/plf_training?user=plf_training_admin&password=pff123";
			c = DriverManager.getConnection(s);

			Statement st = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			Statement st1 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			Statement st2 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			Statement st3 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

			ResultSet stt2 = st.executeQuery(
					"select * from tn_tvl_classes where tr_no=" + TrainNo + " and tr_tvl_class='" + clss + "'");
			stt2.absolute(1);
			farefactor = stt2.getDouble(3);

			// response.setContentType("text/html");
			//
			// // Get the PrintWriter object to write the response
			// PrintWriter out = response.getWriter();
			//
			// out.println("<script>document.getElementById('fare').value = " + TotalFare + ";</script>");

		} catch (Exception e) {
			System.out.println(e);
		}
		return farefactor;
	}

	public void SaveDB(int Trno, String Trname, String from, String to, String cls, ArrayList<Passengers> pass) {
		try {
			Connection c = null;
			Class.forName("org.postgresql.Driver");

			String s = "";
			s = "jdbc:postgresql://192.168.110.48:5432/plf_training?user=plf_training_admin&password=pff123";
			c = DriverManager.getConnection(s);
			PreparedStatement statement = null;
			for (Passengers ps : pass) {
				String sql = "INSERT INTO tickets (name , age  ,fromst ,Tost,TrainNo ,TrainName ,classtr ) VALUES (?,?,?,?,?,?,?)";

				// Create the prepared statement
				statement = c.prepareStatement(sql);

				// Set the parameter values
				statement.setString(1, ps.getName());
				statement.setInt(2, ps.getage());

				statement.setString(3, from);
				statement.setString(4, to);
				statement.setInt(5, Trno);
				statement.setString(6, Trname);
				statement.setString(7, cls);
			}
			TicketModel tm = new TicketModel(Trname, Trno, from, to, cls, pass);

		} catch (Exception e) {

		}

	}

}


import java.util.ArrayList;

public class ClassModel {
	String TrainName;
	int Trainno;

	String from;
	String to;
	ArrayList<String> tnc = new ArrayList();

	ClassModel() {

	}

	public String getTrainName() {
		return TrainName;

	}

	public void setTrainName(String Trn) {
		this.TrainName = Trn;
	}

	public int getTrainno() {
		return Trainno;
	}

	public void setTrainno(int trno) {
		this.Trainno = trno;
	}

	public String getcls() {
		String s = " ";
		for (int i = 0; i < tnc.size(); i++) {
			s = s + tnc.get(i) + ",";
		}
		return s;
	}

	public void setcls(String cls) {
		tnc.add(cls);
	}

}
